package xsp

trait ChainRep[T, C <: Chain] {
	def toChain(t: T): C
	def fromChain(c: C): T
}
object ChainRep {
	sealed trait NonChain[-A]
	object NonChain {
		implicit def anyNonChain[A]: NonChain[A] = null
		implicit def chainAmbiguity[A <: Chain]: NonChain[A] = null
	}

	implicit object UnitChainRep extends ChainRep[Unit, Start] {
		def toChain(t: Unit) = Start
		def fromChain(c: Start) = ()
	}
	implicit def nonChainRep[A: NonChain] = new ChainRep[A, Start ~ A] {
		def toChain(a: A) = Start ~ a
		def fromChain(c: Start ~ A) = c.tail
	}
	[2..22#implicit def chainRep1[[#T1#]] = new ChainRep[([#T1#]), Start ~ [#T1# ~ ]] {
		def toChain(t: ([#T1#])) = Start ~ [#t._1# ~ ]
		def fromChain(c: Start ~ [#T1# ~ ]) = c match {
			case Start ~ [#t1# ~ ] => ([#t1#])
		}
	}#
	]
}